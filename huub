
// Parker Lambert
// binary-game-autofill.js
// 2020-1-24

/*
I'm a junior taking AP Comp Sci Principles, which is a very difficult class.
We have to play this game to teach us binary:
	https://studio.code.org/projects/applab/iukLbcDnzqgoxuu810unLw
	
So, here's a JS program that I wrote which auto-fills all of the fields.
*/


// Excuse my lack of comments, but I'm young and invincible so I don't have 
// to care.

function solveDecimal(row) {
    // <child> is a BinaryRow element.
    var children = row.children;

    var decValChild = undefined;
    var binChildren = [];

    var binString = "";

    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var split = child.id.split("_");

        var tag = split[1];

        if (tag != "decVal") {
            binString += child.innerHTML;
        } else {
            decValChild = child;
        }
    }

    decValChild.value = parseInt(binString, 2);

    var e = jQuery.Event("keypress");
    e.which = 13;
    e.keyCode = 13;

    $("#screen1").trigger(e);
}

function solveBinary(row) {
    // <child> is a BinaryRow element.
    var children = row.children;

    var binChildren = []

    var decimal = 0;

    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var split = child.id.split("_");

        var tag = split[1];

        if (tag != "decVal") {
            binChildren.push(child);
        } else {
            decimal = parseInt(child.innerHTML);
        }
    }

    var binary = decimal.toString(2);

    binary = "0".repeat(8 - binary.length) + binary;

    for (var i = 0; i < binChildren.length; i++) {
        if (binary[binChildren[i].id.split("_")[1]] == "1") {
            binChildren[i].click();
        }
    }
}

var observer = new MutationObserver(function(mutations, observer) {
    for (var i = 0; i < mutations.length; i++) {
        for (var j = 0; j < mutations[i].addedNodes.length; j++) {
            // Something was added to the screen.
            var child = mutations[i].addedNodes[j];

            if (child.parentElement.id == "screen1") {
                if (child.id.startsWith("BinaryRow")) {
                    var children = child.children;

                    for (var k = 0; k < children.length; k++) {
                        if (children[k].id.endsWith("decVal")) {
                            var decval = children[k];
                            var solveForDecimal = decval.innerHTML == "";

                            if (solveForDecimal) {
                                solveDecimal(child);
                            } else {
                                solveBinary(child);
                            }
                        }
                    }
                }
            }
        }
    }
});

observer.observe($("#screen1").get(0), {
    childList: true,
    subtree: false
});